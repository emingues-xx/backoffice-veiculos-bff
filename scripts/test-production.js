#!/usr/bin/env node

const axios = require('axios');

const PRODUCTION_URL = 'https://backoffice-veiculos-bff-production.up.railway.app';

async function testProduction() {
  console.log('üß™ Testando Backoffice Ve√≠culos BFF em Produ√ß√£o...\n');

  try {
    // Test 1: Root endpoint
    console.log('1. Testando Root Endpoint...');
    const rootResponse = await axios.get(`${PRODUCTION_URL}/`);
    console.log('‚úÖ Root:', rootResponse.data.message);
    console.log('');

    // Test 2: Health check
    console.log('2. Testando Health Check...');
    const healthResponse = await axios.get(`${PRODUCTION_URL}/health`);
    console.log('‚úÖ Health Check:', healthResponse.data.message);
    console.log('‚úÖ Environment:', healthResponse.data.environment);
    console.log('‚úÖ Version:', healthResponse.data.version);
    console.log('');

    // Test 3: Documentation
    console.log('3. Testando Documenta√ß√£o...');
    const docsResponse = await axios.get(`${PRODUCTION_URL}/docs`);
    console.log('‚úÖ Documenta√ß√£o dispon√≠vel em:', `${PRODUCTION_URL}/docs`);
    console.log('');

    // Test 4: Vehicles endpoint (public)
    console.log('4. Testando GET /api/vehicles (p√∫blico)...');
    const vehiclesResponse = await axios.get(`${PRODUCTION_URL}/api/vehicles`);
    console.log('‚úÖ Vehicles endpoint funcionando');
    console.log('‚úÖ Total de ve√≠culos:', vehiclesResponse.data.data?.pagination?.total || 0);
    console.log('');

    // Test 5: Vehicles with filters
    console.log('5. Testando GET /api/vehicles com filtros...');
    const filteredResponse = await axios.get(`${PRODUCTION_URL}/api/vehicles?page=1&limit=5`);
    console.log('‚úÖ Filtros funcionando');
    console.log('‚úÖ P√°gina:', filteredResponse.data.data?.pagination?.page || 1);
    console.log('‚úÖ Limite:', filteredResponse.data.data?.pagination?.limit || 5);
    console.log('');

    // Test 6: Old endpoint (should fail)
    console.log('6. Testando endpoint antigo /api/veiculos (deve falhar)...');
    try {
      await axios.get(`${PRODUCTION_URL}/api/veiculos`);
      console.log('‚ùå Endpoint antigo ainda funciona (n√£o deveria)');
    } catch (error) {
      if (error.response?.data?.error?.includes('Rota n√£o encontrada')) {
        console.log('‚úÖ Endpoint antigo corretamente removido');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.data?.error || error.message);
      }
    }
    console.log('');

    console.log('üéâ Todos os testes conclu√≠dos com sucesso!');
    console.log('');
    console.log('üìã Resumo:');
    console.log('‚úÖ BFF funcionando em produ√ß√£o');
    console.log('‚úÖ Endpoints em ingl√™s ativos');
    console.log('‚úÖ Integra√ß√£o com API backend funcionando');
    console.log('‚úÖ Documenta√ß√£o Swagger dispon√≠vel');
    console.log('‚úÖ Endpoints antigos removidos');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
    process.exit(1);
  }
}

testProduction();
